// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using FantasyPremierLeague;
using FantasyPremierLeagueML.Model;

namespace FantasyPremierLeagueML.ConsoleApp
{
    class Program
    {
        static async Task Main(string[] args)
        {
            var fplWebApiClient = new WebApiClient();

            StaticResponse staticResponse = await fplWebApiClient.GetStaticAsync();

            IEnumerable<Fixture> fixtures = await fplWebApiClient.GetFixturesAsync();

            using (StreamWriter writer = new StreamWriter(File.OpenWrite("predictions.csv")))
            {
                writer.WriteLine("player,difficulty,home,points");

                int progress = 0;
                int max = staticResponse.Elements.Count();
                foreach (Element element in staticResponse.Elements)
                {
                    Console.WriteLine($"Predicting {++progress} of {max}");

                    ElementSummaryResponse elementResponse = await fplWebApiClient.GetElementSummaryAsync(element.Id);

                    if (elementResponse == null)
                        continue;

                    ElementHistoryPast history2017 = elementResponse.HistoryPast.SingleOrDefault(hp => hp.SeasonName == "2017/18");
                    ElementHistoryPast history2018 = elementResponse.HistoryPast.SingleOrDefault(hp => hp.SeasonName == "2018/19");
                    ElementHistoryPast history2019 = elementResponse.HistoryPast.SingleOrDefault(hp => hp.SeasonName == "2019/20");

                    ModelInput fixtureData = new ModelInput()
                    {
                        Mins2017 = (history2017 == null) ? 0 : history2017.Minutes,
                        Pts2017 = (history2017 == null) ? 0 : history2017.TotalPoints,
                        Valid2017 = (history2017 == null) ? 0 : 1,
                        Mins2018 = (history2018 == null) ? 0 : history2018.Minutes,
                        Pts2018 = (history2018 == null) ? 0 : history2018.TotalPoints,
                        Valid2018 = (history2018 == null) ? 0 : 1,
                        Mins2019 = (history2019 == null) ? 0 : history2019.Minutes,
                        Pts2019 = (history2019 == null) ? 0 : history2019.TotalPoints,
                        Valid2019 = (history2019 == null) ? 0 : 1,
                        Diff = 2F,
                        Home = 0F,
                    };

                    foreach (ElementFixture fixture in elementResponse.Fixtures)
                    {
                        fixtureData.Diff = fixture.Difficulty;
                        fixtureData.Home = fixture.IsHome ? 1 : 0;

                        var predictionResult = ConsumeModel.Predict(fixtureData);

                        writer.WriteLine($"{element.FirstName} {element.SecondName},{fixtureData.Diff},{fixtureData.Home},{predictionResult.Score}");
                    }
                }
            }
        }
    }
}
